/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package View.Interface;

import Controller.Customer.CustomerController;
import Model.Customer.Customer;
import Model.Customer.CustomerDaoBD;
import PersonaDTO.DtoCustomer;
import View.Table;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author ekard
 */
public class TablaClientes extends javax.swing.JInternalFrame {

    /**
     * Creates new form TablaClientes
     */
    
    public TablaClientes() {
        initComponents();
        loadCustomerData();
        
    }
     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        txtFiltro = new javax.swing.JTextField();

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Nombre", "Fecha Nacimiento", "Edad", "Telefono", "Correo"
            }
        ));
        jScrollPane1.setViewportView(tabla);

        txtFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFiltroActionPerformed(evt);
            }
        });
        txtFiltro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFiltroKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtFiltro)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 602, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(9, Short.MAX_VALUE)
                .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtFiltroKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFiltroKeyReleased
        Table.filter(this.tabla, txtFiltro.getText());
    }//GEN-LAST:event_txtFiltroKeyReleased

    private void txtFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFiltroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFiltroActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabla;
    private javax.swing.JTextField txtFiltro;
    // End of variables declaration//GEN-END:variables

// public void DisplayAll (ArrayList<DtoCustomer> lista) {
//       DefaultTableModel mode = new DefaultTableModel();
//       mode.addColumn("Id");
//       mode.addColumn("Nombre");
//       mode.addColumn("Edad");
//       mode.addColumn("Telefono");
//       mode.addColumn("Correo");
//        
//        for (DtoCustomer cusDao : lista) {
//            Object[] row = {cusDao.getId(),cusDao.getNombre(),cusDao.getFechaNacimiento(),cusDao.getTelefono(),cusDao.getCorreo()};
//            mode.addRow(row);
//            
//        }
//        tabla.setModel(mode);
//    }
 
 private void DisplayAll(List<DtoCustomer> List) {
    // Obtén el modelo actual de la tabla
    DefaultTableModel model = (DefaultTableModel) tabla.getModel();

    // Limpia el modelo de la tabla
    model.setRowCount(0);

    // Verifica si la lista de usuarios no está vacía
    if (!List.isEmpty()) {
        // Itera sobre la lista de usuarios y agrega cada usuario al modelo de la tabla
        for (DtoCustomer customer : List) {
            Object[] rowData = {customer.getId(),customer.getNombre(),customer.getFechaNacimiento(),customer.getEdad(),customer.getTelefono(),customer.getCorreo() };
            model.addRow(rowData);
        }
    } else {
        
    
    }
    }
 private void loadCustomerData() {
        CustomerDaoBD DaoBd = new CustomerDaoBD();

        // Obtén la lista de usuarios utilizando el método readAll
        List<DtoCustomer> List = DaoBd.readAll();

        // Actualiza la tabla con la nueva información
        DisplayAll(List);
    }
    }

